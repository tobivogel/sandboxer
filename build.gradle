apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'fatjar'
apply plugin: 'application'


sourceCompatibility = '1.7'
targetCompatibility = '1.7'

defaultTasks 'build'

// UTF-8 should be standard by now. So use it!
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

// Set our project variables
project.ext {
    dropwizardVersion = '0.6.2'
}

// The main class of the application
mainClassName = 'com.gotocon.cdworkshop.SandboxerService'

// Add Gradle FatJar Plugin, see https://github.com/musketyr/gradle-fatjar-plugin
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'eu.appsatori', name: 'gradle-fatjar-plugin', version: '0.2'
    }
}

dependencies {
    compile 'com.yammer.dropwizard:dropwizard-core:'+ dropwizardVersion,
            'com.yammer.dropwizard:dropwizard-client:'+ dropwizardVersion,
            'com.yammer.dropwizard:dropwizard-auth:'+ dropwizardVersion,
            'com.yammer.dropwizard:dropwizard-views:'+ dropwizardVersion,
            'org.apache.commons:commons-lang3:3.4'

    testCompile 'org.hamcrest:hamcrest-all:1.3',
            'org.mockito:mockito-all:1.9.5',
            'junit:junit:4.12'
}

// Configure the fatJar task
fatJar {
    classifier 'fat'

    // We need to add the main class to the manifest, otherwise the JAR won't start.
    manifest {
        attributes 'Main-Class': mainClassName
    }

    // We have to exclude signature files from the fat JAR, otherwise we'll get invalid signature file digest errors.
    exclude 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.SF'
}

// Configure the run task to start the Dropwizard service
run {
    args 'server', './src/dist/config/dev.yml'
}

//Extended test logging
test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "short" //default
        // set options for log level DEBUG, this will appear when running gradle test -i
        debug {
            events "started", "skipped", "failed"
            exceptionFormat "full"
        }
    }
}

task copyConfigFiles(type: Copy) {
    from 'src/dist/config'
    into 'build/libs'
}

task buildFatJar(dependsOn: [fatJar, copyConfigFiles]) {
}

// Hide output subfolders from IntelliJ for each subproject
idea {
    module {
        excludeDirs += file('.idea')
        excludeDirs += file('target')
        excludeDirs += file('gradle')
        excludeDirs += file('out')
    }
}

// Set git as default VCS in IntelliJ
idea.project.ipr {
    withXml { provider ->
        provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
        provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@directory = '$PROJECT_DIR$'
    }
}